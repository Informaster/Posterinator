/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package posterinator;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.plugins.jpeg.JPEGImageReadParam;
import javax.imageio.stream.FileImageOutputStream;
import javax.swing.JFileChooser;

/**
 *
 * @author Arthur
 */
public class window extends javax.swing.JFrame {
    BufferedImage bi=null;
    BufferedImage biB=null;
    /**
     * Creates new form window
     */
    public window() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){
            public void paintComponent(Graphics g){
                super.paintComponent(g);
                zeichnen(g);
            }

        };
        jToggleButton1 = new javax.swing.JToggleButton();
        jTextField1 = new javax.swing.JTextField();
        jToggleButton2 = new javax.swing.JToggleButton();
        jTextField2 = new javax.swing.JTextField();
        jToggleButton3 = new javax.swing.JToggleButton();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jToggleButton4 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 517, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 273, Short.MAX_VALUE)
        );

        jToggleButton1.setText("Bild wählen");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("C:\\Users\\Arthur\\Documents\\Arthur\\Bilder\\Hintergrund\\abstract_bunt.jpg");
        jTextField1.setToolTipText("");

        jToggleButton2.setText("Bildbibliothek wählen");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jTextField2.setText("C:\\Users\\Arthur\\Documents\\Arthur\\Bilder\\Posterinator2");

        jToggleButton3.setText("Poster erstellen");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        jTextField3.setText("10");

        jTextField4.setText("10");

        jLabel1.setText("Raster wählen:");

        jLabel2.setText("X");

        jLabel3.setText("Y");

        jToggleButton4.setText("Bild speichern unter...");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jToggleButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jToggleButton3)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(32, 32, 32)
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jToggleButton4))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton1)
                    .addComponent(jToggleButton2)
                    .addComponent(jToggleButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jToggleButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        //Bild wählen
        final JFileChooser fc = new JFileChooser();//In response to a button click:        
        fc.setCurrentDirectory(new File("/"));
        int zahl = fc.showOpenDialog(this);
        File p=fc.getSelectedFile();     //p=poster
        jTextField1.setText(p.getAbsolutePath());
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        //Bildbibliothek wählen
        final JFileChooser fc = new JFileChooser();//In response to a button click:        
        fc.setCurrentDirectory(new File("/"));
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int zahl = fc.showOpenDialog(this);
        File b=fc.getSelectedFile();       // b=bilder        
        jTextField2.setText(b.getAbsolutePath());
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
       //Poster erstellen
       Render();                   
       jPanel1.repaint();
       
       /*
       Geschwnidigkeit: 10000 Bilder pro Stunde
       Test:
       1.: 200x100; 612 Bilder; Zeit Beginn: 15:20 (01.01.2015); Ende:        
       */
      
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        //Bild speichern unter...
        JFileChooser fc=new JFileChooser();
        fc.setCurrentDirectory(new File("/"));
        int zahl = fc.showSaveDialog(this);
        File f=fc.getSelectedFile();
        System.out.println("Speichern als "+f.getAbsolutePath());
        try {
            //anstatt ImageIO.write wird folgendes verwendet, um die Qualität der Bilder beizubehalten
            //Quelle: http://stackoverflow.com/questions/17015197/quality-loss-using-imageio-write
           /* ImageWriter writer = ImageIO.getImageWritersByFormatName("jpeg").next();  //Iterator mit allen jpg-Bildern
            ImageWriteParam param = writer.getDefaultWriteParam();  
            param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT); 
            param.setCompressionQuality(1.0F); //Qualität wird auf Maximum (1.0) gesetzt            
            FileImageOutputStream output = new FileImageOutputStream(f);
            writer.setOutput(output);
            IIOImage image = new IIOImage(bi, null, null);
            writer.write(null, image, param);
            writer.dispose();
            writer.write(bi);
            */
            ImageIO.write(bi,"jpg",f);
        } catch (IOException ex) {
            System.out.println("Problem beim Speichern aufgetreten!");
        }
        
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    /**
     * Hauptprozess
     */
    private void Render(){ 
       
        String pfadB=jTextField2.getText();                          //Einlesen der Eingaben und Deklarierungen
        String pfadP=jTextField1.getText();
        
    
        
            System.out.println("Bilder werden geladen...");
      
        int rasterX=1;
        int rasterY=1;          
                                                      
         String X=jTextField3.getText();
         try{
            rasterX=Integer.parseInt(X);
            System.out.println("Erfolgreich Textfeld 3 ausgelesen! rasterX="+rasterX);
         }catch(NumberFormatException e){
            System.out.println("Fehler in Textfeld 3 (keine Zahl)");
         }
        
           
            
         String Y=jTextField4.getText();  
         try{
             rasterY=Integer.parseInt(Y);
             System.out.println("Erfolgreich Textfeld 4 ausgelesen! rasterY="+rasterY);
         }catch(NumberFormatException e){
             System.out.println("Fehler in Textfeld 4 (keine Zahl)");
         }
       
        Color[] durchschnittsfarbeP=new Color[rasterX*rasterY];        
        
            System.out.println("Deklarierung");
        //  Hier beginnt das Lesen der Dateien
        if (pfadP!=null){                                                    //Lesen des Einzelbildes (Poster)
            try {
                bi=ImageIO.read(new File(pfadP));      
                System.out.println("Poster gelesen");
            } catch (IOException ex) {
                System.out.println("Fehler aufgetreten beim Lesen der Datei");
            }
        }
             
             System.out.println("Durchschnittsfarbe der Rasterkästchen berechnen");
        
        int rasterBreite=bi.getWidth()/rasterX;
        int rasterHoehe=bi.getHeight()/rasterY;
             
        for(int x=0;x<rasterX;x++){                   //Das Poster wird in ein Raster unterteilt, dessen Durchschnittsfarben im durchschnittsfarbeP-Array gespeichert werden
            for(int y=0;y<rasterY;y++){         
                durchschnittsfarbeP[x*rasterY+y]=AverageColor(bi,x*rasterBreite,y*rasterHoehe,rasterBreite,rasterHoehe); //durchschnittsfarbe posterraster
                System.out.println("  Durchschnittsfarbe Kästchen Nr. "+(x*rasterY+y)+" Koordinaten: "+x+","+y+":   "+durchschnittsfarbeP[x*rasterY+y]);
            }
             System.out.println("Lesen von Reihe "+x+" erfolgreich");
        }
        
        
       
        
        File bilder=new File(pfadB);   // Lesen der Bildbibiliothek
        File[] Bild=bilder.listFiles();
        if(bilder!=null){
            Bild=bilder.listFiles();  
        }else{
            System.out.println("                    FEHLER !!!");;
        }
            System.out.println("Bildordner gelesen");
            System.out.println("Dateien: "+Bild);        
        
        int anzahlbilder=Bild.length;
        Color[] durchschnittsfarbeB=new Color[anzahlbilder]; 
        
             System.out.println("Durchschnittsfarbe der Bilder berechnen");
        for(anzahlbilder=0; anzahlbilder<Bild.length;anzahlbilder++){
            if (Bild[anzahlbilder]!=null){
                try {
                    biB=ImageIO.read(Bild[anzahlbilder]);  
                    System.out.println("Bild gelesen : "+(anzahlbilder+1)+" von "+Bild.length);
                } catch (IOException ex) {
                    System.out.println("Fehler aufgetreten beim Lesen der Datei: "+(anzahlbilder+1));
                }
            }                     
            durchschnittsfarbeB[anzahlbilder]=AverageColor(biB,0,0,biB.getWidth(),biB.getHeight());  //Durchschnittsfarbe Bildbibliothekbilder         
                
        }     
       
        
        System.out.println("Farbe Posterraster");
        for(int a=0;a<durchschnittsfarbeP.length;a++){
           System.out.println(a+" : "+durchschnittsfarbeP[a]);
        }
        System.out.println("Farbe Bilder       ");
        for(int b=0;b<durchschnittsfarbeB.length;b++){
           System.out.println(b+" : "+durchschnittsfarbeB[b]);
        }
        String[] Bildabfolge=new String[durchschnittsfarbeP.length];
        int[] Bildnummern=Regression(durchschnittsfarbeP,durchschnittsfarbeB);
        
        
        
        System.out.println("Bildabfolgenfarbe");
        for(int i=0;i<Bildabfolge.length;i++){
            System.out.println( (i+1)+" : Farbe:"+durchschnittsfarbeB[Bildnummern[i]]+"  von Bild mit Nr "+(Bildnummern[i]+1)+" passt am besten zu "+durchschnittsfarbeP[i]);
        }
        
        //Ab hier wird gezeichnet------------------------------
        
      
        
        Graphics2D g_bi=bi.createGraphics();
        BufferedImage bildPoster=null;
        for(int x=0;x<rasterX;x++){
            for(int y=0;y<rasterY;y++){
                try{
                    bildPoster=ImageIO.read(Bild[Bildnummern[x*rasterY+y]]);
                }catch(IOException ex){
                    System.out.println("Fehler aufgetreten beim Lesen der Datei: "+(x*rasterY+y+1));
                }             
                int breiteR=bi.getWidth()/rasterX;
                int hoeheR=bi.getHeight()/rasterY;
                g_bi.drawImage(bildPoster, x*breiteR,y*hoeheR,breiteR,hoeheR,this);
                System.out.println(x*rasterY+y);
              
            }
        }
        
        System.out.println("Erfolgreich!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11");       
       
        
    }
    
    /**
     * Zeichnen der Objekte in jPanel1
     * @param g Graphics-Objekt
     */
    private void zeichnen(Graphics g){
        
        if(bi!=null){                              // wenn ein Bild geladen ist
            int w=jPanel1.getWidth();
            int hoeheneu=bi.getHeight()*w/bi.getWidth();
            if(hoeheneu>jPanel1.getHeight()){
                hoeheneu=jPanel1.getHeight();
            }
            g.drawImage(bi,0,0,w,hoeheneu,this);
        }else{                                     //wenn noch kein Bild geladen ist
            g.setColor(new Color((int)(Math.random()*256),(int)(Math.random()*256),(int)(Math.random()*256)));
            g.fillRect(0,0,jPanel1.getWidth(),jPanel1.getHeight());
        }
        
    }   
    
    /**
     * Berechnung der Durchschnittsfarbe eines Ausschnitts eines Bildes
     * @param bi das zu verwendete Bild
     * @param X links oben x-Koordinate des Ausschnitts
     * @param Y links oben y-Koordinate des Ausschnitts
     * @param breite Breite des Ausschnitts
     * @param hoehe Höhe des Ausschnitts
     * @return die Durchschnittsfarbe
     */    
    private Color AverageColor(BufferedImage bi,int X,int Y,int breite, int hoehe){   
        int r=0,g=0,b=0,pixelanzahl=0;     
        System.out.println("    Deklarierung");
        System.out.println("    Berechne...");
            for(pixelanzahl=0;pixelanzahl<Math.sqrt(breite*hoehe);pixelanzahl++){
                int co=bi.getRGB((int)((Math.random()*breite+X)),(int)((Math.random()*hoehe+Y)));
                Color c=new Color(co);
                r+=c.getRed();                                   // Farbwerte werden alle  addiert und ...
                g+=c.getGreen();
                b+=c.getBlue();         
            }
       
        r/=pixelanzahl;                                           // ... durch die Anzahl der ausgwewählten Pixel dividiert
        g/=pixelanzahl;
        b/=pixelanzahl;
        Color C=new Color(r,g,b);  
        
        System.out.println("    Erfolgreich! Farbe: "+C);
        return C;       
    }
    
    /**Ordnet Farbvektoren zueinander
     * @param P Durchschnittsfarben aller Posterrasterkästchen
     * @param B Durchschnittsfarben aller Bilder aus der Bildbibliothek
     * @return B-Array in der passenden Reihenfolge
     */
    private int[] Regression(Color[] P, Color[] B){                                   //Finde zu jedem Rasterkästchen des Poster das passendste Bild
        
        int[][] poster=new int[P.length][3];
        int[][] bilder=new int[B.length][3]; 
        int[] bildNr=new int[P.length];
        String[] bild=new String[bilder.length];
         //Farbwerte werden in ganzen Zahlen umgewandelt
        for(int i=0;i<P.length;i++){                  //poster array array werden die entsprechenden Farben zugewiesen
            poster[i][0]=P[i].getRed();
            poster[i][1]=P[i].getGreen();
            poster[i][2]=P[i].getBlue();            
        }
        for(int i=0;i<B.length;i++){                  //bilder raster " "   "     "    "                "       "
            bilder[i][0]=B[i].getRed();
            bilder[i][1]=B[i].getGreen();
            bilder[i][2]=B[i].getBlue();            
        }
        
        int[][] Xbilder=new int[P.length][3];
        for(int j=0;j<P.length;j++){          
            bildNr[j]=kleinsterAbstand(poster[j],bilder);
            System.out.println("        bildNr["+j+"]: "+bildNr[j]);
        }
        
       
        return bildNr;
    }
    
    /**nächster Vektor einer Gruppe zu einem anderen Vektor
     * 
     * @param a entspricht der Durchschnittsfarbe eines Rasterkästchens des Posters   
     * @param b entspricht allen Durchschnittsfarben der Bilder aus der Bildbibliothek
     * @return Nummer des nächstgelegenen Vektors zu a
     */ 
    private int kleinsterAbstand(int[]a, int[][]b){ //berechnet den kleinsten Abstand einer Vektorengruppe und einem Bezugsvektor
        
        int nr=0;
        for(int i=0;i<b.length-1;i++){
            if(Abstand(a,b[i+1])<Abstand(a,b[nr])){
                nr=i+1;               
            }
        }
        System.out.println("                Abstand "+Abstand(a,b[nr]));
        return nr;                                  //gibt die Nummer des Vektors,der am nächsten zum Bezugsvektor a liegt, an
        
    }
    
    /**Abstandsberechnung
     * 
     * @param a Vektor a
     * @param b Vektor b
     * @return Abstand von a und b (ohne Wurzel, da der Abstand nicht nötig ist, sondern nur die Hierarchie von vielen Abständen; spart Rechenarbeit)
     */
    private double Abstand(int[] a, int[] b){        
        return (a[0]-b[0])*(a[0]-b[0])+(a[1]-b[1])*(a[1]-b[1])+(a[2]-b[2])*(a[2]-b[2]);     //Abstandsberechnung
    }    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new window().setVisible(true);
            }
        });
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    // End of variables declaration//GEN-END:variables
}
